name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

env:
  SKIP_E2E: ${{ vars.SKIP_E2E }}
  SKIP_AXE: ${{ vars.SKIP_AXE }}
  SKIP_LHCI: ${{ vars.SKIP_LHCI }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      CI: true
      SKIP_LHCI: ${{ vars.SKIP_LHCI }}
      NEXT_PUBLIC_ANALYTICS_DISABLED: '1'
      NEXT_PUBLIC_ANALYTICS_DEBUG: '0'
      NEXT_PUBLIC_ENV: 'ci'
      NEXT_PUBLIC_SITE_URL: 'https://ci.louhen.app'
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: '10000000-ffff-ffff-ffff-000000000001'
      NEXT_PUBLIC_WAITLIST_URGENCY: 'true'
      NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
      NEXT_PUBLIC_LOCALES: 'en,de'
      NEXT_PUBLIC_DEFAULT_LOCALE: 'en'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: npm ci

      - name: Build design tokens
        run: npm run -w @louhen/design-tokens build

      - name: Color policy (fast scan)
        env:
          COLOR_POLICY_MODE: warn
        run: npm run guard:hex

      - name: Color policy (enforce)
        env:
          COLOR_POLICY_MODE: enforce
        run: npm run ci:color-policy

      - name: Upload color policy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: color-policy-report
          path: ci-artifacts/color-policy-report.txt
          if-no-files-found: warn

      - name: Lint
        run: npm run lint
        continue-on-error: false

      - name: Unit tests
        run: npm run test
        continue-on-error: false

      - name: Build
        run: npm run build
        continue-on-error: false


  e2e-tests:
    name: Playwright E2E
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ vars.SKIP_E2E != '1' }}
    env:
      CI: true
      NODE_ENV: production
      TEST_MODE: '1'
      APP_BASE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_SITE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_ENV: 'ci'
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: '10000000-ffff-ffff-ffff-000000000001'
      NEXT_PUBLIC_WAITLIST_URGENCY: 'true'
      NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
      NEXT_PUBLIC_LOCALES: 'en,de'
      NEXT_PUBLIC_DEFAULT_LOCALE: 'en'
      NEXT_PUBLIC_ANALYTICS_DISABLED: '0'
      NEXT_PUBLIC_ANALYTICS_DEBUG: '1'
      HCAPTCHA_SECRET: ci-hcaptcha-secret
      WAITLIST_CONFIRM_TTL_DAYS: '7'
      FIREBASE_PROJECT_ID: ci-firebase
      FIREBASE_DB_REGION: eur3
      FIREBASE_ADMIN_SA_B64: eyJwcm9qZWN0X2lkIjoiY2ktZmlyZWJhc2UifQ==
      RESEND_API_KEY: ci-resend-key
      RESEND_FROM: no-reply@ci.louhen.app
      RESEND_REPLY_TO: hello@ci.louhen.app
      STATUS_USER: ci-status
      STATUS_PASS: ci-secret
      SUPPRESSION_SALT: ci-suppression-salt
      EMAIL_TRANSPORT: noop
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: npm ci

      - name: Build
        run: npm run build

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          npm run start:test-server > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server readiness
        run: npx --yes wait-on http://127.0.0.1:4311/waitlist --timeout 180000

      - name: Run Playwright E2E suite
        run: |
          mkdir -p playwright-report
          npx playwright test --project chromium --reporter=html,json --workers=2 | tee playwright-report/report.json

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
            rm server.pid
          fi
          if [ -f server.log ]; then
            echo '--- server.log tail ---'
            tail -n 200 server.log || true
          fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-report
          path: playwright-report/
          if-no-files-found: ignore

      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-results
          path: test-results/
          if-no-files-found: ignore

      - name: Upload server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-server-log
          path: server.log
          if-no-files-found: ignore


  accessibility-tests:
    name: Playwright Axe
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ vars.SKIP_AXE != '1' }}
    env:
      CI: true
      NODE_ENV: production
      TEST_MODE: '1'
      APP_BASE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_SITE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_ENV: 'ci'
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: '10000000-ffff-ffff-ffff-000000000001'
      NEXT_PUBLIC_WAITLIST_URGENCY: 'true'
      NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
      NEXT_PUBLIC_LOCALES: 'en,de'
      NEXT_PUBLIC_DEFAULT_LOCALE: 'en'
      NEXT_PUBLIC_ANALYTICS_DISABLED: '0'
      NEXT_PUBLIC_ANALYTICS_DEBUG: '1'
      HCAPTCHA_SECRET: ci-hcaptcha-secret
      WAITLIST_CONFIRM_TTL_DAYS: '7'
      FIREBASE_PROJECT_ID: ci-firebase
      FIREBASE_DB_REGION: eur3
      FIREBASE_ADMIN_SA_B64: eyJwcm9qZWN0X2lkIjoiY2ktZmlyZWJhc2UifQ==
      RESEND_API_KEY: ci-resend-key
      RESEND_FROM: no-reply@ci.louhen.app
      RESEND_REPLY_TO: hello@ci.louhen.app
      STATUS_USER: ci-status
      STATUS_PASS: ci-secret
      SUPPRESSION_SALT: ci-suppression-salt
      EMAIL_TRANSPORT: noop
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: npm ci

      - name: Build
        run: npm run build

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          npm run start:test-server > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server readiness
        run: npx --yes wait-on http://127.0.0.1:4311/waitlist --timeout 180000

      - name: Run accessibility suite
        run: |
          mkdir -p playwright-report
          npx playwright test --project accessibility --reporter=html,json --workers=2 | tee playwright-report/report.json

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
            rm server.pid
          fi
          if [ -f server.log ]; then
            echo '--- server.log tail ---'
            tail -n 200 server.log || true
          fi

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-axe-report
          path: playwright-report/
          if-no-files-found: ignore

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-axe-results
          path: test-results/
          if-no-files-found: ignore

      - name: Upload server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-axe-server-log
          path: server.log
          if-no-files-found: ignore


  lighthouse:
    name: Lighthouse
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ vars.SKIP_LHCI != '1' }}
    env:
      CI: true
      NODE_ENV: production
      TEST_MODE: '1'
      APP_BASE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_SITE_URL: http://127.0.0.1:4311
      NEXT_PUBLIC_ENV: 'ci'
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: '10000000-ffff-ffff-ffff-000000000001'
      NEXT_PUBLIC_WAITLIST_URGENCY: 'true'
      NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
      NEXT_PUBLIC_LOCALES: 'en,de'
      NEXT_PUBLIC_DEFAULT_LOCALE: 'en'
      NEXT_PUBLIC_ANALYTICS_DISABLED: '0'
      NEXT_PUBLIC_ANALYTICS_DEBUG: '1'
      HCAPTCHA_SECRET: ci-hcaptcha-secret
      WAITLIST_CONFIRM_TTL_DAYS: '7'
      FIREBASE_PROJECT_ID: ci-firebase
      FIREBASE_DB_REGION: eur3
      FIREBASE_ADMIN_SA_B64: eyJwcm9qZWN0X2lkIjoiY2ktZmlyZWJhc2UifQ==
      RESEND_API_KEY: ci-resend-key
      RESEND_FROM: no-reply@ci.louhen.app
      RESEND_REPLY_TO: hello@ci.louhen.app
      STATUS_USER: ci-status
      STATUS_PASS: ci-secret
      SUPPRESSION_SALT: ci-suppression-salt
      EMAIL_TRANSPORT: noop
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Start test server
        run: |
          npm run start:test-server > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server readiness
        run: npx --yes wait-on http://127.0.0.1:4311/waitlist --timeout 180000

      - name: Run Lighthouse
        env:
          LHCI_URL: http://127.0.0.1:4311/waitlist
        run: npm run lighthouse

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
            rm server.pid
          fi
          if [ -f server.log ]; then
            echo '--- server.log tail ---'
            tail -n 200 server.log || true
          fi

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          if-no-files-found: ignore

      - name: Upload server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-server-log
          path: server.log
          if-no-files-found: ignore


  enforce-release-source:
    # Guard: only allow PRs into production if they originate from staging
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Fail if head is not staging
        run: |
          if [ "${{ github.event.pull_request.head.ref }}" != "staging" ]; then
            echo "❌ PRs into 'production' must originate from 'staging'."
            exit 1
          fi
          echo "✅ Source branch is 'staging' — release guard passed."

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    env:
      CI: true
      NEXT_PUBLIC_ANALYTICS_DISABLED: '1'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Semantic-release
        run: npx semantic-release --debug
